
(in-package :analyzer)

(defvar +analyzer-visitor+             '|analyzer.AnalyzerVisitor|)
(defvar +node+                           '|com.github.javaparser.ast.Node|)
(defvar +import-declaration+             '|com.github.javaparser.ast.ImportDeclaration|)
(defvar +field-declaration+              '|com.github.javaparser.ast.body.FieldDeclaration|)
(defvar +reference-type+                 '|com.github.javaparser.ast.type.ReferenceType|)
(defvar +object-creation-expr+           '|com.github.javaparser.ast.expr.ObjectCreationExpr|)
(defvar +variable-declarator+            '|com.github.javaparser.ast.body.VariableDeclarator|)
(defvar +method-call-expr+               '|com.github.javaparser.ast.expr.MethodCallExpr|)
(defvar +method-declaration+             '|com.github.javaparser.ast.body.MethodDeclaration|)
(defvar +array-creation-expr+            '|com.github.javaparser.ast.expr.ArrayCreationExpr|)
(defvar +variable-declaration-expr+      '|com.github.javaparser.ast.expr.VariableDeclarationExpr|)
(defvar +assign-expr+                    '|com.github.javaparser.ast.expr.AssignExpr|)
(defvar +binary-expr+                    '|com.github.javaparser.ast.expr.BinaryExpr|)
(defvar +binary-expr-operator+           '|com.github.javaparser.ast.expr.BinaryExpr$Operator|)
(defvar +name-expr+                      '|com.github.javaparser.ast.expr.NameExpr|)
(defvar +class-or-interface-declaration+ '|com.github.javaparser.ast.body.ClassOrInterfaceDeclaration|)
(defvar +boolean-literal-expression+     '|com.github.javaparser.ast.expr.BooleanLiteralExpr|)
(defvar +string-literal-expr+            '|com.github.javaparser.ast.expr.StringLiteralExpr|)
(defvar +char-literal-expr+              '|com.github.javaparser.ast.expr.CharLiteralExpr|)
(defvar +double-literal-expr+            '|com.github.javaparser.ast.expr.DoubleLiteralExpr|)
(defvar +integer-literal-expr+           '|com.github.javaparser.ast.expr.IntegerLiteralExpr|)
(defvar +long-literal-expr+              '|com.github.javaparser.ast.expr.LongLiteralExpr|)
(defvar +cast-expr+                      '|com.github.javaparser.ast.expr.CastExpr|)
